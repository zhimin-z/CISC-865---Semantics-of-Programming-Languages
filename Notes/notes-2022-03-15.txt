465/865 Tuesday 2022-03-15
Jana Dunfield
This lecture is (hopefully) recorded until about the 50-minute mark

https://stream.queensu.ca/hapi/v1/contents/permalinks/MacCorryD216/view
If you are watching the stream above, please connect to Zoom, the audio is more likely to work there

Today: Continuing lec12.pdf.


program
variables    x, y, z

integers     n

values       v ::= n
                 | True
		 | False
		 | (Lam x e)
		 | x                   -- maybe?

expressions  e ::= ()
                 | n
                 | (+ e e)
                 | (- e e)
		 | (= e e)
		 | (< e e)
		 | True
		 | False
		 | (Ite e e e)         -- if-then-else (Ite e1 e2 e3)  if e1 then e2 else e3
		 | (Lam x e)           -- Lambda, anonymous function that takes an argument x and evaluates the body e
		 | (Call e e)          -- (Call e1 e2)  call the function e1 with argument e2
		 | x                   -- program variable

+–––––––––––+
| e |->R e' | expression e reduces to e'
+–––––––––––+

    –––––––––––––––––––––– red-add
    (+ n1 n2) |->R n1 + n2

    –––––––––––––––––––––– red-subtract
    (- n1 n2) |->R n1 - n2

    –––––––––––––––––––––– red-equals     where n1 = n2
    (= n1 n2) |->R n1 = n2                 is True if n1 equals n2, and is False if n1 ≠ n2

    –––––––––––––––––––––– red-lessthan   where n1 < n2
    (< n1 n2) |->R n1 < n2                  is True if n1 less than n2, and is False if n1 ≥ n2
   
    ––––––––––––––––––––––––––––––––– red-ite-then
    (Ite True eThen eElse) |->R eThen

    –––––––––––––––––––––––––––––––––– red-ite-else
    (Ite False eThen eElse) |->R eElse
 
    –––––––––––––––––––––––––––––––––––– red-by-value ("red-beta" in lec12.pdf)
    (Call (Lam x e) vArg) |->R [vArg/x]e

    ––––––––––––––––––––––––––––
    (Proj1 (Pair v1 v2)) |->R v1
    (Proj1 (Pair False 5))
    
    ––––––––––––––––––––––––––––
    (Proj2 (Pair v1 v2)) |->R v2

+–––––––––––+
| e |->  e' | expression e steps to e'
+–––––––––––+

   C ::= []
       | (+ C e) | (+ v C)
       | (- C e) | (- v C)
       | (= C e) | (= v C)
       | (< C e) | (< v C)
       | (Ite C e e)
       | (Call C e) | (Call v C)

      e |->R e'
    –––––––––––––– step-context
    C[e] |-> C[e']

   
* lec12.pdf: Intro to typing

==========================================================================

lec12.pdf       "Y combinator"

Typing context
Context
Variables x, y, z
   Γ ::= Ø                   
       | Γ, x : S               assume x has type S
S, T ::= unit                   type of unit
       | int                    type of integers
       | bool                   type of booleans
       | S -> S                 type of functions that take S and return T

  Γ1 = (Ø, x : bool)
  Γ2 = (Ø, y : int)
  Γ1, Γ2  =  Ø, x : bool, Ø, y : int
          =  Ø, x : bool, y : int

   Γ ::= Ø                   
       | Γ, Γ
       | x : S

   x : bool
   Ø, x : bool         
       
   (x : int, y : bool), z : unit
   x : int, (y : bool, z : unit)
   x : int, Ø                    ≡        Ø, x : int         ≡  x : int

  A true   B true
  ––––––––––––––– ∧Intro
   A ∧ B true
   
+–––––––––––––+
| Γ ⊢ e : S   |  Under typing assumptions Γ, expression e has type S
+–––––––––––––+
  turnstile "⊢" read "entails"

   ––––––––––– intIntro
   Γ ⊢ n : int

   ––––––––––––– unitIntro
   Γ ⊢ () : unit

   (x : S) ∈ Γ
   ––––––––––––––––– type-assum
       Γ ⊢ x  : S

    Γ, x : S ⊢ e : T                    Γ ⊢ e1 : S -> T   Γ ⊢ e2 : S
––––––––––––––––––––––––– ->Intro       –––––––––––––––––––––––––––– ->Elim
   Γ ⊢ (Lam x e)  : S -> T              Γ ⊢ (Call e1 e2) : T



  (x : int) ∈ Ø, x : int               (x : int) ∈ Ø, x : int              
  –––––––––––––––––––––– type-assum    –––––––––––––––––––––– type-assum 
  Ø, x : int ⊢ x : int                  Ø, x : int ⊢ x : int            
  –––––––––––––––––––––––––––––––––––––––––––––––––––––––––– type-add
  Ø, x : int ⊢ (+ x x) : int
  –––––––––––––––––––––––––––––––– ->Intro               –––––––––––– intIntro
  Ø ⊢ (Lam x (+ x x)) : int -> int                        Ø ⊢ 5 : int
  –––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––– ->Elim
   Ø ⊢ (Call (Lam x (+ x x)) 5) : int

    (Call (Lam x (+ x x)) 5) |-> [5/x](+ x x)
                               = (+ 5 5)

Today:

  Talk through type-true, type-false,
  type-add, type-subtract,
  type-equals, type-lt

  type-ite:

  Γ ⊢ e : bool    Γ ⊢ eThen : T    Γ ⊢ eElse : T
  –––––––––––––––––––––––––––––––––––––––––––––– type-ite
          Γ ⊢ (Ite e eThen eElse) : T

  Γ ⊢ e1 : int   Γ ⊢ e2 : int
  ––––––––––––––––––––––––––– type-lt
  Γ ⊢ (< e1 e2) : bool
Example:
Γx  =  Ø, (x : int)
                        (x : int) ∈ Γx
  ––––––––––– intIntro  ––––––––––––––––––– type-assum
  Γx ⊢ 0 : int           Γx ⊢ x : int
  ––––––––––––––––––––––––––––––––––– type-lt     –––––––––––– intIntro  ––––––––––––– intIntro
  Γx ⊢ (< 0 x) : bool                             Γx ⊢ 1 : int           Γx ⊢ -1 : int
  –––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––– type-ite
        Γx ⊢ (Ite (< 0 x) 1     -1   ) : int
             (Ite e       eThen eElse)

     see above               see above         ––––––––––––––– type-true
  Γx ⊢ (< 0 x) : bool        Γx ⊢ 1 : int      Γx ⊢ True : bool
  ––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––– [type-ite]
        Γx ⊬ (Ite (< 0 x) 1     True) : int                     but bool ≠ int
   Type mismatch: expected int, got bool

  Γwithexpressions  =  Ø, x : bool, y : int, (+ 1 2) : bool    → inconsistent context,                                                don't want this

Pairs:  (writing * for the product symbol)

(1, True)     (2, 3, 4)   (5, "asdf", False)
                                                  ––––––––––––––––tfalse  ––––––––––– intIntro
  Γ ⊢ e1 : S1       Γ ⊢ e2 : S2                   Ø ⊢ False : bool        Ø ⊢ 5 : int
  ––––––––––––––––––––––––––––– *Intro            ––––––––––––––––––––––––––––––––––––– *Intro
    Γ ⊢ (Pair e1 e2) : (S1 * S2)                  Ø ⊢ (Pair False 5) : (bool * int)
        (e1, e2)     : (S1, S2)

  Γ ⊢ e : (S1 * S2)            Γ ⊢ e : (S1 * S2)           
  –––––––––––––––––– *Elim1    –––––––––––––––––– *Elim2    ∧Elim2
  Γ ⊢ (Proj1 e) : S1           Γ ⊢ (Proj2 e) : S2
      π1                            π2 
      fst                           snd

             see above
  Ø ⊢ (Pair False 5) : (bool * int)
  –––––––––––––––––––––––––––––––––––– *Elim1
  Ø ⊢ (Proj1 (Pair False 5)) : bool

  (Proj1 (Pair False 5)) |->R False

  (Proj2 (Pair False 5)) |->R 5

  x : (bool * int) ∈ Ø, x : (bool * int)
  –––––––––––––––––––––––––––––––––––––– type-assum
  Ø, x : (bool * int) ⊢ x : (bool * int)
  ––––––––––––––––––––––––––––––––––––––––– *Elim2
  Ø, x : (bool * int) ⊢ (Proj2 x) : int                 


  Γ ⊢ e : S1                        Γ ⊢ e : S2
  –––––––––––––––––––––– +Intro1    –––––––––––––––––––––– +Intro2
  Γ ⊢ (Inj1 e) : S1 + S2            Γ ⊢ (Inj2 e) : S1 + S2

  data Either S1 S2 =              int + bool =
       Inj1 S1                         Inj1 int
     | Inj2 S2                       | Inj2 bool

  ––––––––––––––– type-true
  Ø ⊢ True : bool
  ––––––––––––––––––––––––––––––––––––––––––––––– +Intro1
  Ø ⊢ (Inj1 True) : bool + ((int * bool) -> bool)

  –––––––––––––––––––––––––––––– type-false
  Ø, x : int*bool ⊢ False : bool
  –––––––––––––––––––––––––––––––––––––––––– ->Intro
  Ø ⊢ (Lam x False) : ((int * bool) -> bool)
  –––––––––––––––––––––––––––––––––––––––––––––––––––––––– +Intro2
  Ø ⊢ (Inj2 (Lam x False)) : bool + ((int * bool) -> bool)

   x : int * bool ∈  Ø, x : int*bool
  –––––––––––––––––––––––––––––––––– type-assum
  Ø, x : int*bool ⊢ x : int * bool
  –––––––––––––––––––––––––––––––––– *Elim2
  Ø, x : int*bool ⊢ (Proj2 x) : bool
  –––––––––––––––––––––––––––––––––––––––––– ->Intro
  Ø ⊢ (Lam x (Proj2 x)) : ((int * bool) -> bool)
  –––––––––––––––––––––––––––––––––––––––––––––––––––––––––––– +Intro2
  Ø ⊢ (Inj2 (Lam x (Proj2 x))) : bool + ((int * bool) -> bool)

   bool + ((int * bool) -> bool)
           /      \
       bool        ((int * bool) -> bool)