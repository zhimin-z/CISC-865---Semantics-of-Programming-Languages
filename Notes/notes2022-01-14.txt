465/865 Friday 2022-01-14
Please mute your microphone when not speaking

Questions from lec1.pdf?

lec2.pdf: Section 2 today, possibly start Section 3


  Rule notation: premises and conclusion.

  Premises can talk about anything.

  "Truth" vs. "derivability"

  Judgments: statements about...
       truth of a formula            CISC 204
       what an expression steps to   lec2.pdf
       what an expression returns    lec2.pdf
       truth of a formula            465/865, later
       what type an expression has   465/865, later

  integers      n ∈ ℤ
  expressions   e ::= n
                    | (+ e e)
  Convention: If a letter (nonterminal) is defined
              in a grammar, then
	        if we add prime marks or subscripts
		we're still talking about the same kind
		of animal
  If I write e5, e5 is an expression, defined the same way as
  if I wrote e
  Also, e2', e3'''', e0  all expressions
  n1 n0 n5 n' n''        all integers
  In a rule, the nonterminals are called "meta-variables"
+------------+
|  e |-> e'  |   e steps to e'
+------------+

    n = n1 + n2               
  ––––––––––––––– step-add
  (+ n1 n2) |-> n

       e1 |-> e1'
–––––––––––––––––––––––– step-add-left
(+ e1 e2) |-> (+ e1' e2)

       e2 |-> e2'
–––––––––––––––––––––––– step-add-right
(+ e1 e2) |-> (+ e1 e2')

  (+ 3 4) |-> 7  hopefully
  
[IF I WROTE:

   ––––––––––––– strange
   (+ 3 4) |-> 0

then it would be one of our rules.
IT IS NOT ONE OF OUR RULES
]


"meta-variables"

Pitfalls:
  "|->" ≠ "="   (+ 3 4) is *not* equal to 7
  
  "|->" is only *one* step of computation


Rule-based semantics

Rule notation
Derivation notation


premise1   ...        premise n
––––––––––––––––––––––––––––––– name of rule
         conclusion

If all the premises are true,
then the conclusion is true

(in 204:
  φ1   φ2
  –––––––– ∧i
  φ1 ∧ φ2
)

If all the premises are derivable using our rules,
then the conclusion is derivable using our rules



if I write  n  then  n  stands for some integer
0, 1, -1, 2, -2, ...

(+ 3 -4)  is an expression  e
3         is an expression  e
(+ (+ 1 2) (+ 4 3)) is an expression
(- 1 2)   is not an expression, we don't have
          subtraction yet

7 = 3 + 4

In a rule, things like  e,  n, n1, n2, e1, e2
are meta-variables

What are the meta-variables in rule step-add?
n, n1, n2

For all integers n, n1, n2,
  if  n = n1 + n2           (premise)
  then                      (horizontal line)
    (+ n1 n2) steps to n    (conclusion)

Instantiating the meta-variables
Choose  n1  to be 5
Choose  n2  to be 2
Choose  n   to be 7
  if  n = n1 + n2
  then
    (+ n1 n2) steps to n
  if  7 = 5 + 2
  then
    (+ 5 2) steps to 7

Derivation:

      7 = 5 + 2
   ––––––––––––––––– step-add
     (+ 5 2) |-> 7

In grammars, repeated occurrences of a nonterminal/meta-variable could refer to different things
(+ e e) is a production for e  and allows two different expressions e
(+ 5 2)
We sometimes write grammars like:
    e ::= n
        | (+ e1 e2)
Subscripts in a grammar don't really mean anything

Question: what does (+ 1 3) step to?

        4 = 1 + 3
    –––––––––––––––––––– step-add
      (+ 1  3)  |-> 4

      (+ n1 n2) |-> n    conclusion of the rule
    n1 is 1
    n2 is 3
    n  is 4

Is it the case that
    (+ 1 3) |-> 5   ?
Is  (+ 1 3) |-> 5 derivable using our rules?

       5 = 1 + 3        not true, so not actually
     –––––––––––––––––––– step-add   a derivation
       (+ 1  3)  |-> 5          
       (+ n1 n2) |-> n
       n1 is 1
       n2 is 3
       n  is 5

Try to derive:

   ––––––––––––––––––––– step-add
   (+ 1  (+ 5 2)) |-> 
   (+ n1 n2     ) |-> n
(+ 5 2) is an expression, but not a number, and step-add requires a number n2
So we can't use step-add here

               1  |-> e1'
   ––––––––––––––––––––––––––––– step-add-left
   (+ 1  (+ 5 2)) |->
   (+ e1 e2     ) |-> (+ e1' e2)
e1 is 1
e2 is (+ 5 2)

   Derive   1 |-> e1'
      
     –––––––––––––––––––––– step-add
        1         |-> e1'
	(+ n1 n2) |-> n     1 does not match (+ n1 n2)
   So we can't use step-add.

     ––––––––––––––––––––––– step-add-left
       1          |->
       (+ e1 e2)  |-> (+ e1' e2)
   Can't use step-add-left
   Can't use step-add-right
   Can't derive  1 |-> e1'
1 |-> e1' was the premise we needed for step-add-left,
we can't use step-add-left

Back to trying to derive

          (+ 5 2) |-> e2'
   ––––––––––––––––––––––––––––– step-add-right
   (+ 1  (+ 5 2)) |-> 
   (+ e1 e2     ) |-> (+ e1 e2')
   e1 is 1
   e2 is (+ 5 2)

Try to derive (+ 5 2) |-> e2':

         7 = 5 + 2 
     –––––––––––––––––– step-add
       (+ 5  2) |-> e2'
       (+ n1 n2) |-> n
    n1 = 5
    n2 = 2
    n  = 7
    n  = e2'
    e2' = 7

Derivation (derivation tree):
             7 = 5 + 2 
        –––––––––––––––– step-add
          (+ 5 2) |-> 7
   ––––––––––––––––––––––––––––– step-add-right
   (+ 1  (+ 5 2)) |-> (+ 1 7)


What books/sources do I recommend?
  (with caveats)
  Robert Harper, Practical Foundations for Programming Languages
  Benjamin Pierce, Types and Programming Languages

Do we need to write the "n1 is ..." every time?
  No, those are just to help us keep track of what we're doing

