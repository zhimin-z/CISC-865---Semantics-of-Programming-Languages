CISC 465/865
Jana Dunfield
2022-04-08

Mutable state

Loc ::= L1 | L2 | ...

e ::= ...
    | (Alloc e)
    | (Get e)
    | (Set e1 e2)
    | Loc

v ::= ...
    | Loc

Σ ::= emp
    | Σ, Loc ► v

e |-> e'

Σ; e |-> Σ'; e'     Under the store Σ, expression e steps to e', with a new store Σ'

C ::= []
    | ...
    | (Alloc C)                 -- (Alloc (+ 2 2))
    | (Get C)                   -- (Get (Call getsomelocation 1))
    | (Set C e)                 -- (Set (Call g 1) (Call f 2))
    | (Set v C)                 -- (Set L5 (Call f 2))

S, T ::= ...
       | Ref T                  -- reference    Ptr T

Λ ::= Ø
    | Loc : S
    
   Λ; Γ ⊢ e : S                       Λ; Γ ⊢ e : Ref S                  L2 : Ref int
 –––––––––––––––––––––––– type-alloc  –––––––––––––––––– type-get     –––––––––––––––
 Λ; Γ ⊢ (Alloc e) : Ref S             Λ; Γ ⊢ (Get e) : S               (Get L2) : int

    –––––––––––––––––––––––––––––––––––––––––––––––        –––––––––––––––––––––––––––––
    Σ1, L►v, Σ2; (Set L v2)  |->R  Σ1, L►v2, Σ2; ()        Σ; (- n1 n2)  |->R  Σ; n1-n2

    Λ; Γ ⊢ e1 : Ref T      Λ; Γ ⊢ e2 : T
    ––––––––––––––––––––––––––––––––––––– type-set
         Λ; Γ ⊢ (Set e1 e2) : unit

          x:S ∈ Γ                      Λ; Γ, x : S1 ⊢ e : S2
    ––––––––––––––––––––– type-assum   –––––––––––––––––––––––––––– ->Intro
     Λ; Γ ⊢ x : S                       Λ; Γ ⊢ (Lam x e) : S1 -> S2

        Loc:S ∈ Λ
    ––––––––––––––––––––––– type-loc                  S <: Top
     Λ; Γ ⊢ Loc : Ref S
 store
 typing

      ––––––––––––––––––––– type-loc
         Γ ⊢ L2 : Ref Top
      –––––––––––––––––––––– type-get
      Λ; Γ ⊢ (Get L2) : Top

Conjecture 1 (Type Preservation).
If   Λ; Ø ⊢ e : S                    If   L1:int; Ø ⊢ (Get L1) : int
and  ⊢ Σ : Λ                         and  ⊬ L1►True : L1:int       -- does not hold
and  Σ; e |-> Σ'; e'                 and  L1►True; (Get L1) |-> L1►True; True
then Λ; Ø ⊢ e' : S
 and ⊢ Σ' : Λ              L1►True; e |-> L1►False; e'


If   Ø; Ø ⊢ (Alloc 1) : Ref int
and  ⊢ emp : Ø
and  emp; (Alloc 1) |-> L2►1; L2
then
     Ø; Ø ⊢ L2 : Ref int           Ø, x : int ⊢ x : int
 and ⊢ L2►1 : Ø


Conjecture 1 (Type Preservation).
If   Λ; Ø ⊢ e : S                   If   Ø; Ø ⊢ (Alloc 1) : Ref int
and  ⊢ Σ : Λ                        and  ⊢ emp : Ø
and  Σ; e |-> Σ'; e'                and  emp; (Alloc 1) |-> L2►1; L2
then there exists Λ' such that
     Λ, Λ'; Ø ⊢ e' : S              then Ø, L2 : int; Ø ⊢ L2 : Ref int
 and ⊢ Σ' : Λ, Λ'                    and  ⊢ L2►1 : Ø, L2 : int

=======================================================================

(Let r (Alloc (Lam y (+ y 1)))
  (Set 

If we have polymorphism,
  the above conjecture does not hold.
Λ; Γ, α type ⊢ e : S
–––––––––––––––––––––– ∀Intro  
Λ; Γ ⊢ e : ∀α. S

  
Wright (1995)

   let val c = ref (fn x => x)
   in  c := (fn x => 1+x)
       !c true
   end




              ...
  –––––––––––––––––––––––––––––– ->Intro
  Ø, α type ⊢ (Lam x x) : α -> α                                         Γ ⊢ e : S
  –––––––––––––––––––––––––––––––––––––––––––– type-alloc           ––––––––––––––––––––– type-alloc
  Ø, α type ⊢ (Alloc (Lam x x)) : Ref (α -> α)                      Γ ⊢ (Alloc e) : Ref S
–––––––––––––––––––––––––––––––––––––––––––––– ∀Intro
  Ø ⊢ (Alloc (Lam x x)) : ∀α. Ref (α -> α)

   –––––––––––––––––––––––––– type-assum
   ... ⊢ r : ∀α. Ref (α -> α)                 ... ⊢ int type
   ––––––––––––––––––––––––––––––––––––––––––––––––––––––––– ∀Elim
   ... ⊢ r : [int/α] Ref (α -> α)
           = Ref (int -> int)                   (Lam x (+ x 1)) : int -> int

   ––––––––––––––––––––––––––– type-assum
   ... ⊢ r : ∀α. Ref (α -> α)                 ... ⊢ bool type
   –––––––––––––––––––––––––––––––––––––––––––––––––––––––––– ∀Elim
   ... ⊢ r : [bool/α] Ref (α -> α)
           = Ref (bool -> bool)
   ––––––––––––––––––––––––––––––––––––––––––––––
   ... ⊢ (Get r) : bool -> bool

   ––––––––––––––––––––––––––––
   ... ⊢ (Lam x x) : α -> α
   –––––––––––––––––––––––––––– ∀Intro
   ... ⊢ (Lam x x) : ∀α. α -> α
   –––––––––––––––––––––––––––––––––––––––––– type-alloc
   ... ⊢ (Alloc (Lam x x)) : Ref (∀α. α -> α)

   r : Ref (∀α. α -> a)
   (Set r (Lam x (+ x 1)))    (Lam x (+ x 1)) : int -> int
                              (Lam x (+ x 1)) ://// ∀α. α -> α
   (Call (Lam x x) True)
   (Call (Lam x (+ x 1)) True)
         (Lam x (+ x 1)) : int -> int

   Let r = (Alloc (Lam x x))
   in
   (Let r (Alloc (Lam x x))      -- use ∀Intro on (Alloc (Lam x x)), so
                                 -- r : ∀α. Ref (α -> α) ⊢ ...
     (Let dontcare (Set r (Lam x (+ x 1)))  -- use ∀Elim with  [int/α]  on  ∀α. Ref (α -> α),
                                            -- so r has type Ref (int -> int)
     
        (Call (Get r) True)                        (+ True 1) |///>R
	       -- r : ∀α. Ref (α -> α)
	       -- use ∀Elim with  [bool/α]  on ∀α. Ref (α -> α)
	       --  so r has type Ref (bool -> bool)
	))

This was solved in Standard ML by restricting ∀Intro:
replace

  Λ; Γ, α type ⊢ e : S
  –––––––––––––––––––––– ∀Intro
  Λ; Γ ⊢ e : ∀α. S

with

  Λ; Γ, α type ⊢ v : S
  –––––––––––––––––––––– ∀Intro  
  Λ; Γ ⊢ v : ∀α. S
         ^
	 ^-- "value restriction"

(Alloc ...) is not a value, so we can't use ∀Intro in the problematic way.

S <: T           T <: S        Ref T <: Ref S
–––––––––––––––––––––––        ––––––––––––––––––––––––––––––
  Ref S  <:  Ref T             (Ref S) -> S  <:  (Ref T) -> T
Get : (Ref S) -> S
Set : S * (Ref S) -> unit

== My research ==


Mostly about types

1. Types as a means of specifying program properties:
   The typechecker verifies good things and rejects bad things

  f : int -> bool       f is a function that takes an integer and,
                         if it returns something, that something is boolean

Information-flow typing:

  g : string{High} -> bool{High}    g is a function that takes a high-security (private) string
                                     and returns a high-security (private) boolean
  g : string{High} -> bool{Low}     rejected by type checker
  g = (Lam x (= x password))


Cost semantics:

  lookup : (dictionary * string) -> bool 
  lookup : (dictionary[n] * string) ->[log n] bool
  m    m log n

Data structure invariants (e.g. my thesis):

  rbt: a red-black tree that respects the colour invariant
       (both children of a red node are black)           Black       Red

  delete : (rbt * key) -> rbt

  rbt[h]: a red-black tree that respects the colour invariant and the black height invariant,
           with black height h (black height = number of black nodes on every path from the root to a leaf)

            Black
	   /     \
	Black     Red
       /     \     / \
    Empty   Empty E. E.

  delete : ∀h:nat. rbt[h] * key -> (rbt[h] ∪ rbt[h-1])
                                           ^
		     		      union type


Gradual typing:
  Allow "less typed" programs, programs that are partly "less typed" and partly "more typed"

  Original motivation (Siek and Taha 2006, ...):
    Combine "dynamic" typing (like Scheme, Racket, Python, JavaScript, ...)
    and static typing (like Haskell, Java, ...)



  My motivation (e.g. Jafery and Dunfield 2017):
    Combine static typing like the kind we've covered                delete : tree * key -> tree
    and more precise static typing (like data structure invariants)  delete : ∀h:nat. rbt[h] * key -> (rbt[h] ∪ rbt[h-1])

  S, T ::= ...
         | ?       unknown type
   
  untyped : ?

  f : ? -> ?
  (+ f 1)

  S ≈ T   "S is consistent with T"

  ? -> ?    ≈  int -> bool
  int -> ?  ≈  int -> bool      int -> ?   ≈  int -> int       int -> ?  ≈//  bool -> bool

  Γ ⊢ e : S         S ≈ T
  ––––––––––––––––––––––– type-consistent
       Γ ⊢ e : T

  Γ ⊢ 5 : int      int ≈// bool
  ––––––––––––––––––––––––––––– type-consistent
      Γ ⊢ 5 : bool

  Γ ⊢ 5 : int      int ≈ ?
  ––––––––––––––––––––––––––––– type-consistent
      Γ ⊢ 5 : ?                                      ? ≈ bool
      –––––––––––––––––––––––––––––––––––––––––––––––-––––––- type-consistent
                        Γ ⊢ 5 : bool  ===>  


  Γ ⊢ 5 : int      int ≈ ?
  ––––––––––––––––––––––––––––– type-consistent
      Γ ⊢ 5 : ?  ===>  5

  Γ ⊢ e : int ===> e'     ? ≈ int
  –––––––––––––––––––––––––––––––––––––– type-consistent
      Γ ⊢ e : int  ===>  (cast e' int)
                         (throw "runtime cast exception")


2. Types to increase language expressiveness
   The typechecker helps you do things

  Manage incremental computation

  Allow call-by-value and call-by-name in the same language,
    equally conveniently
  
  

1. refinement types
2. intersection and union types   --connected to polymorphism breaking
3. call-by-value / call-by-need polymorphism
4. intersection and union types
5. incremental computation
6. gradual typing 
